#include <iostream>
#include <omp.h>
#include <queue>

using namespace std;

struct TreeNode { // struct= different datatypes can be used together
    int val;
    TreeNode* left; // it will only store addresses
    TreeNode* right;

    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

void pBFS(TreeNode* root) {
    queue<TreeNode*> q;
    q.push(root);     // 1

    while (!q.empty()) {
        int qs = q.size();

        #pragma omp parallel for
        for (int i = 0; i < qs; i++) {
            TreeNode* node;
            #pragma omp critical
            {
                node = q.front();
                cout << node->val << " ";
                q.pop();
                if (node->left)
                    q.push(node->left);
                if (node->right)
                    q.push(node->right);
            }
        }
    }
}



int main() {
    TreeNode* tree = new TreeNode(1); // to allocate memory dynamically
    tree->left = new TreeNode(2);
    tree->right = new TreeNode(3);
    tree->left->left = new TreeNode(4);
    tree->left->right = new TreeNode(5);
    tree->right->left = new TreeNode(6);
    tree->right->right = new TreeNode(7);
/*
    Our Tree Looks like this:
                1
            2       3
        4     5   6    7
        
    */
    cout << "Parallel BFS: ";
    pBFS(tree);
    cout << "\n";


    return 0;
}
..............................................................................................
